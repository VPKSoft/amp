openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/V5849/amp-api/1.0.0
info:
  description: amp# software RESTful API
  version: "1.0.0"
  title: amp# API
  contact:
    email: vpksoft@vpksoft.net
    name: Petteri Kautonen
    url: https://www.vpksoft.net
  license:
    name: MIT
    url: 'https://spdx.org/licenses/MIT.html'
tags:
  - name: developers
    description: Operations available to regular developers
  - name: settings
    description: Operations to control the amp# software settings to regular developers
paths:
  /api/ok:
    get:
      tags:
        - developers      
      description: |
        Returns a string containing 'OK'.
      responses:
        '200':
          description: Test endpoint
          content:
            application/text:    
              schema:
                type: string   
                example: "OK"
  /api/songs/{queued}:
    get:
      tags:
        - developers      
      description: |
        Returns the song data in the current album.
      parameters:
        - in: path
          name: queued
          description: a value indicating whether only the queued songs needs to be returned
          required: true
          schema:
            type: boolean        
      responses:
        '200':
          description: Gets the songs in the current album. This can take a while if there are thousands of songs in the album.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumSongRemote'
  /api/songs:
    get:
      tags:
        - developers      
      description: |
        Returns the song data in the current album.
      responses:
        '200':
          description: Gets the songs in the current album. This can take a while if there are thousands of songs in the album.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumSongRemote'
  /api/currentSong:
    get:
      tags:
        - developers      
      description: |
         Gets the ID, length and position of the currently playing song.
      responses:
        '200':
          description: The ID, length and position of the currently playing song.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentPositionTuple'
  /api/removeSongFromAlbum:
    post:
      tags:
        - developers      
      description: |
        Removes a song from the current album.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumSongRemote'      
      responses:
        '200':
          description: An OK result
  /api/control/setPositionSeconds:
    post:
      tags:
        - developers      
      description: |
        Sets the playback position in seconds.
      requestBody:
        description: The playback position in seconds.
        required: true
        content:
          application/json:
            schema:        
              type: number
              example: 128.214
      responses:
        '200':
          description: An OK result          
  /api/control/setRating/{rating}:
    post:
      tags:
        - developers      
      description: |
        Sets the rating for the current song.
      parameters:
        - in: path
          name: rating
          required: true
          description: The new rating value.
          schema:
            type: integer
            format: int32
            minimum: 0            
            maximum: 1000            
            example: 788
      responses:
        '200':
          description: An OK result
  /api/setSongVolumeByIds/{floatValue}:
    post:
      tags:
         - developers
      description: |
        Sets a volume for multiple songs.
      parameters:
        - in: path
          name: floatValue
          required: true
          description: The new volume value.
          schema:
            type: number
            format: float
            minimum: 0.0
            maximum: 2.0   
      requestBody:
        required: true
        description: A list of song database ID numbers to set the volume for.
        content:
          application/json:
            schema:        
              type: array
              items:
                type: integer
              example: [1, 2, 6, 22]
      responses:
        '200':
          description: An OK result   
  /api/play/{id}:
    post:
      tags:
         - developers
      description: |
        Plays a song with a given database ID number or the next song if the given id is -1.
      parameters:
        - in: path
          name: id
          required: true
          description: The database ID number for the song to play.
          schema:
            type: number
            format: int32
            example: 1742
      responses:
        '200':
          description: An OK result    
  /api/queueScrambleSelectedIds:
    post:
      tags:
         - developers
      description: |
        Scrambles the queue between the specified selected songs.
      requestBody:
        description: A list of selected music file identifiers to scramble.
        required: true
        content:
          application/json:
            schema:        
              type: array
              items:
                type: integer
              example: [1, 2, 6, 22]
      responses:
        '200':
          description: An OK result          
  /api/getAlbums:
    get:
      tags:
         - developers
      description: |
        Gets the albums currently in the software database.
      responses:
        '200':
          description: The albums currently in the software database.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumRemote'      
  /api/selectAlbum/{albumName}:
    get:
      tags:
         - developers
      description: |
        Selects an album with a given name.
      parameters:
        - in: path
          name: albumName
          required: true
          description: The name of the album to select.
          schema:
            type: string
            example: "default"
      responses:
        '200':
          description: true if the album was selected successfully; otherwise false
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /api/getCurrentAlbum:
    get:
      tags:
         - developers
      description: |
        Gets the current album.
      responses:
        '200':
          description: The current album name.
          content:
            application/json:
              schema:
                type: string
                example: "default"
  /api/getChangedSongs:
    get:
      tags:
         - developers
      description: |
         Gets a list of songs which properties were changed (name, volume, rating).
      responses:
        '200':
          description: A list of songs which properties have been changed in the current album.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumSongRemote'  
  /api/setAmpVolume/{floatValue}:
    get:
      tags:
         - developers
         - settings
      description: |
        Sets the program volume.
      parameters:
        - in: path
          name: floatValue
          required: true
          description: The volume.
          schema:
            type: number
            format: float
            example: 0.74
      responses:
        '200':
          description: An OK result               
        '400':
          description: An exception occurred within the software.
  /api/state:
    get:
      tags:
         - developers
      description: |
        The current state of the amp# music player.
      responses:
        '200':
          description: The current state of the amp# music player.
          content:
            application/json:
              example: 
                random: true
                stackQueue: false
                playing: true
                filtered: false
                shuffle: true
                paused: false
                stopped: false
                queueChangedFromPreviousQuery: false
                queueCount: 42
                currentSongId: 1234
                currentSongName: "Enya - Dark Sky Island - (1) A07 Dark Sky Island"
                currentSongPosition: 106.34
                currentSongLength: 279.44
                currentAlbumName: "Default"
                albumChanged: false
                albumContentsChanged: false
                songsChanged: false
                canGoPrevious: true
                albumLoading: false
                ampVolume: 0.89   
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/PlayerStateRemote'  
  /api/queueChanged:
    get:
      tags:
         - developers
      description: |
        A value if the queue was changed from the previous query.
      responses:
        '200':
          description: true if the queue was changed from the previous query, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /api/albumPlayListChanged:
    get:
      tags:
         - developers
      description: |
        A value if the play list of the current album was changed from the previous query
      responses:
        '200':
          description: true if the play list of the current album was changed from the previous query, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: false
  /api/albumChanged:
    get:
      tags:
         - developers
      description: |
        A value if current music album was changed.
      responses:
        '200':
          description: true if current music album was changed, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: false
  /api/songsChanged:
    get:
      tags:
         - developers
      description: |
        A value whether songs in the album have changed.
      responses:
        '200':
          description: true if songs in the album have changed, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: false
  /api/stackQueue:
    get:
      tags:
         - developers
      description: |
        A value indicating whether the stack queue is enabled.
      responses:
        '200':
          description: true the stack queue is enabled, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: false
  /api/shuffle:
    get:
      tags:
         - developers
      description: |
        A value whether shuffling is enabled in the main form of the apm# application.
      responses:
        '200':
          description: true the shuffling is enabled in the main form of the apm# application, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /api/canGoPrevious:
    get:
      tags:
         - developers
      description: |
        A value whether it is possible to jump to the previously played song.
      responses:
        '200':
          description: true the if it is possible to jump to the previously played song, otherwise false.
          content:
            application/json:
              schema:
                type: boolean
                example: true
  /api/control/{command}:
    post:
      parameters:
        - in: path
          name: command
          required: true
          schema:
            type: string
            enum:
              - next
              - previous
              - pause
              - play
          description: >
            Commands:
             * `next` - Play the next song
             * `previous` - Play the previous song
             * `pause` - Pause the playback
             * `play` - Resume the playback or start the playback
      responses:
        '200':
          description: The command was executed successfully.
        '400':
          description: The command was not found.
      tags:
         - developers
      description: |
        Executes simple commands such as play, pause, next, previous and so on.
  /api/getSavedQueues/{albumName}:
    get:
      parameters:
        - in: path
          name: albumName
          required: true
          schema:
            type: string      
            example: "Default"
      tags:
       - developers
      description: |
        Gets the saved queues for a specified album.
      responses:
        '200':
          description: The albums currently in the software database.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SavedQueueRemote'
  /api/queue/{insert}:
    post:
      tags:
         - developers
      description: |
        Inserts or appends to the queue the given song list.
      parameters:
        - in: path
          name: insert
          required: true
          description: A value incating to insert or append to the queue.
          schema:
            type: boolean      
            example: false
      requestBody:
        required: true
        description: A list of songs to be appended or inserted into the queue.
        content:
          application/json:
            schema:        
              type: array
              items:
                $ref: '#/components/schemas/AlbumSongRemote'
      responses:
        '200':
          description: Alist of queued songs in the current album.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumSongRemote'
  /api/getQueuedSongs:
    get:
      tags:
         - developers
      description: |
       Gets the queued songs.
      responses:
        '200':
          description: Alist of queued songs in the current album.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlbumSongRemote'    
  /api/queueLoad/{queueIndex}:
    post:
      tags:
         - developers
      description: |
       Loads the specified queue into the amp# playlist.
      parameters:
        - in: path
          name: queueIndex
          required: true
          description: The queue index (Database ID number) for the queue to load.
          schema:
            type: integer
            format: int32
            example: 42
      requestBody:
        required: true
        description: A value indicating whether to append to the previous queue.
        content:
          application/json:
            schema:        
              type: boolean
              example: false
      responses:
        '200':
          description: An OK result               
components:
  schemas:
    AlbumSongRemote:
      type: object
      required:
        - id
        - queueIndex
        - volume
        - rating
        - duration
        - artist
        - album
        - title
        - songName
        - songNameNoQueue
        - year
        - track
        - fullFileName
        - overrideName
      properties:
        id:
          description: Gets an unique database ID number for the song
          type: integer
          example: 1
        queueIndex:
          description: Gets a queue index of a song. A zero value indicates that a song is not in the queue.
          type: integer
          example: 0
        volume:
          description: Gets a value indicating the song's volume.
          type: number
          format: float
          example: 1.2
        rating:
          description: Gets a value indicating the song's rating.
          type: number
          format: integer
          example: 500
        duration:
          description: Gets a value of the song's duration in seconds.
          type: number
          format: integer
          example: 225
        artist:
          description: Gets the artist of the song.
          type: string
          example: "Enya"
        album:
          description: Gets the album of the song.
          type: string
          example: "Dark Sky Island"
        title:
          description: Gets the title of the song.
          type: string
          example: "The Humming..."
        songName:
          description: Gets a song name combined with the song's ID3vX Tag values and it's queue index in square brackets if the queue index is larger than zero.
          type: string
          example: "Enya - Dark Sky Island - (1) A01 The Humming"
        songNameNoQueue:
          description: Gets a song name combined with the song's ID3vX Tag values.
          type: string
          example: "Enya - Dark Sky Island - (1) A01 The Humming"
        year:
          description: Gets the publishing year of the song. This is an ID3vX Tag value.
          type: string
          example: "2015"
        track:
          description: Gets the track of the song. This is an ID3vX Tag value.
          type: string
          example: "1"
        fullFileName:
          description: Gets the full file name of the underlying file of the song.
          type: string
          example: "C:\\Files\\Muzic\\Ulkomaat\\Enya\\Dark Sky Island\\A01 The Humming.mp3"
        overrideName:
          description: Gets the name of the song if it was overridden via the amp#.
          type: string
          example: "Enya - The Humming..."
        tagStr:
          description: Gets a string combination of everything the ID3vX tag of the file contains. This is for search purposes and the information is in no way in readable format.
          type: string
          example: "[]The Humming...EnyaEnyaDark Sky IslandPop2015101002015 Aigle Music under exclusive licence to Warner Music UK LimitedEnyaEnyaEnyaEnyaPopEnyaEnyaEnyaPop"
    CurrentPositionTuple:
      type: object
      properties:
        item1:
          description: The current song id
          type: integer
          example: 3886
        item2:
          description: The current playback position in seconds
          type: number
          example: 15.75
        item3:
          description: The current song length in seconds
          type: number
          example: 283.7942857
    AlbumRemote:
      type: object
      required:          
        - name
      properties:
        name:
          description: An album name in the amp# database.
          type: string
          example: "Default"
    FilterType:
      type: integer
      format: int32
      enum:
        - 0
        - 1
        - 2
        - 3
      x-enumNames:
        - SearchFiltered
        - QueueFiltered
        - AlternateFiltered
        - NoneFiltered
      description: > 
        An enumeration describing the filter status of the playlist.
        * 0 - The playlist is filter with a search string.
        * 1 - The playlist is showing queued songs.
        * 2 - The playlist is showing song in the alternate queue.
        * 3 - The playlist is not filtered.
    PlayerStateRemote:
      type: object
      required: 
        - random
        - stackQueue
        - playing
        - filtered
        - shuffle
        - paused
        - stopped
        - queueChangedFromPreviousQuery
        - queueCount
        - currentSongId
        - currentSongName
        - currentSongPosition
        - currentSongLength
        - currentAlbumName
        - albumChanged
        - albumContentsChanged
        - songsChanged
        - canGoPrevious
        - albumLoading
        - ampVolume
      properties:
        random:
          description: Indicates if the player is in random mode.
          type: boolean
          example: true
        stackQueue:
          description: A value indicating whether the stack queue playback mode is enabled.
          type: boolean
          example: false
        playing:
          description: A value indicating whether the amp# is playing a song.
          type: boolean
          example: true
        filtered:
          $ref: '#/components/schemas/FilterType'
        shuffle:
          description: Indicates if the player is in shuffle mode.
          type: boolean
          example: true
        paused:
          description: Indicates if the player is paused.
          type: boolean
          example: false
        stopped:
          description: Indicates if the player neither paused or played, meaning it is stopped.
          type: boolean
          example: false
        queueChangedFromPreviousQuery:
          description: Indicates if the queue has been changed from the previous query.
          type: boolean
          example: false
        queueCount:
          description: A number of songs in the queue.
          type: integer
          example: 42
        currentSongId:
          description: An ID of the current song.
          type: integer
          example: 1234
        currentSongName:
          description: The name of the current song.
          type: string
          example: "Enya - Dark Sky Island - (1) A07 Dark Sky Island"
        currentSongPosition:
          description: A position of the current song.
          type: number
          format: double
          example: 106.34
        currentSongLength:
          description: The length of the current song.
          format: double
          example: 279.44
        currentAlbumName:
          description: The currently selected album name of the amp# audio player.
          type: string
          example: "Default"
        albumChanged: 
          description: A value indicating if the album was changed from the previous query.
          type: boolean
          example: false
        albumContentsChanged: 
          description: A value indicating if the album's contents where changed from the previous query.
          type: boolean
          example: false
        songsChanged: 
          description: A value indicating if the album's song properties where changed.
          type: boolean
          example: false
        canGoPrevious:
          description: A value indicating if a previous song can be selected from the amp# play list.
          type: boolean
          example: true
        albumLoading:
          description: A value indicating whether an album is loading.
          type: boolean
          example: false
        ampVolume:
          description: The amp# program's main volume.
          type: number
          format: float
          example: 0.89
    SavedQueueRemote:
      type: object
      required: 
        - id
        - queueName
        - creteDate
        - albumName
        - countTotal
        - queueSongs
      properties:
        id:
          description: The database identifier for the saved queue.
          type: integer
          example: 5
        queueName:
          description: The database identifier for the saved queue.
          type: string
          example: "2021-04-15 Test queue"
        creteDate:
          description: The date and time of the saved queue.
          type: string
          format: datetime
          example: "2017-10-16T19:56:59"
        albumName:
          description: The name of the album the saved queue belongs to.
          type: string
          example: "Default"
        countTotal:
          description: The total count of the queues belonging to this album.
          type: integer
          example: 42
        queueSongs:
          description: The songs in the saved queue.
          type: array
          items:
            $ref: '#/components/schemas/AlbumSongRemote'