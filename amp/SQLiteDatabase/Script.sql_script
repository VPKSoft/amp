/*
MIT License

Copyright(c) 2019 Petteri Kautonen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

--VER 0
CREATE TABLE IF NOT EXISTS DBVERSION(DBVERSION INTEGER NOT NULL);
--ENDVER 0

--VER 1
CREATE TABLE IF NOT EXISTS SONG(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
FILENAME TEXT NOT NULL,
ARTIST TEXT NULL,
ALBUM TEXT NULL,
TRACK TEXT NULL,
YEAR TEXT NULL,
LYRICS TEXT NULL,
RATING INTEGER NULL,
NPLAYED_RAND INTEGER NULL,
NPLAYED_USER INTEGER NULL,
FILESIZE INTEGER NULL,
VOLUME REAL DEFAULT 1.0,
OVERRIDE_NAME TEXT NULL,
TAGFINDSTR TEXT NULL,
TAGREAD INTEGER NULL);

CREATE TABLE IF NOT EXISTS ALBUM(
ID INTEGER PRIMARY KEY AUTOINCREMENT,
ALBUMNAME TEXT NOT NULL);

CREATE TABLE IF NOT EXISTS ALBUMSONGS(
ALBUM_ID INTEGER NOT NULL,
SONG_ID INTEGER NOT NULL,
QUEUEINDEX INTEGER DEFAULT 0);

INSERT INTO ALBUM (ID, ALBUMNAME) 
SELECT 0, 'tmp'
WHERE NOT EXISTS(SELECT * FROM ALBUM WHERE ALBUMNAME = 'tmp');
--ENDVER 1

--VER 2
ALTER TABLE SONG ADD COLUMN FILENAME_NOPATH TEXT NULL;
UPDATE SONG SET FILENAME_NOPATH = REPLACE(FILENAME, RTRIM(FILENAME, REPLACE(FILENAME, '\', '')), '');
--ENDVER 2

--VER 3
CREATE TABLE IF NOT EXISTS QUEUE_SNAPSHOT
(
  ID INTEGER NOT NULL,
  ALBUM_ID INTEGER NOT NULL, 
  SONG_ID INTEGER NOT NULL, 
  QUEUEINDEX INTEGER NOT NULL,
  SNAPSHOTNAME TEXT NOT NULL,
  SNAPSHOT_DATE DATE DEFAULT (datetime('now','localtime'))
);
--ENDVER 3

--VER 4
ALTER TABLE SONG ADD COLUMN SKIPPED_EARLY INTEGER NULL;
UPDATE SONG SET SKIPPED_EARLY = 0;
--ENDVER 4

--VER 5
ALTER TABLE SONG ADD TITLE TEXT NULL;
--ENDVER 5

--VER 6
CREATE TABLE IF NOT EXISTS SONG_HISTORY AS SELECT * FROM SONG WHERE 1 = 0;
--ENDVER 6

--VER 7
CREATE TABLE IF NOT EXISTS TMPSONG AS
SELECT FILENAME, MIN(ID) AS ID FROM SONG 
GROUP BY FILENAME
HAVING COUNT(FILENAME) > 1;

DELETE FROM SONG 
WHERE FILENAME = 
(SELECT FILENAME FROM TMPSONG WHERE TMPSONG.FILENAME = SONG.FILENAME AND TMPSONG.ID <> SONG.ID);

DELETE FROM ALBUMSONGS WHERE SONG_ID NOT IN (SELECT ID FROM SONG);

DELETE FROM QUEUE_SNAPSHOT WHERE SONG_ID NOT IN (SELECT ID FROM SONG);

DROP TABLE IF EXISTS TMPSONG;
--ENDVER 7